bind_rows
gfg_data
gfg_data <- list.files(path = "C:\Users\aholl\Desktop\Data Science Portfolio\Project #1\project#1data",
install.packages(c("devtools", "openai"))
install_github("isinaltinkaya/gptchatteR")
install_github("aholl/gptchatteR")
gptstudio:::addin_chatgpt()
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(fig.width = 5, fig.asp = 1/3)
setwd("C:/Users/aholl/Desktop/Data Science Portfolio/Project #1/project#1newdata/Colorado EPA Data")
# Load packages
library(tidyverse)
library(readxl)
library(lubridate)
library(ggplot2)
library(ggthemes)
library(ggpubr)
library(cowplot)
library(ggcorrplot)
library(corrplot)
library(caret)
library(rpart)
library(rpart.plot)
library(randomForest)
library(ranger)
library(e1071)
library(class)
library(kknn)
library(kernlab)
library(nnet)
library(neuralnet)
library(ROCR)
library(pROC)
library(readxl)
Book1 <- read_excel("Book1.xlsx")
library(ggplot2)
library(dplyr)
knitr::opts_chunk$set(fig.width = 5, fig.asp = 1/3)
# Drop "CHEMICAL REPORT ID" column from data frame Book1 and save it as Book2
Book2 <- Book1[, -c(3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27)]
View(Book2)
# Drop "CHEMICAL REPORT ID" column from data frame Book1 and save it as Book2
BookData <- Book1[, -c(1,3,4,5,6,27,28,28,30,31,32)]
View(BookData)
BookData %>% select(-`DOMESTIC PC ADDRESS LINE2`,`DOMESTIC PC CITY`, `DOMESTIC PC COUNTY / PARISH`,`DOMESTIC PC COUNTY / PARISH`,`DOMESTIC PC STATE`,`DOMESTIC PC POSTAL CODE`, `DOMESTIC PC DUN & BRADSTREET NUMBER`,`FOREIGN PARENT COMPANY NAME`, `FOREIGN PC ADDRESS LINE1`,`SITE ADDRESS LINE2`,`SITE CITY`, `SITE COUNTY / PARISH`, `SITE LATITUDE`,`EPA FACILITY REGISTRY ID`,`WORKERS CODE`,WORKERS,`C / C PROD CAT CODE`,`COMM WORKERS CODE`)
view(BookData)
colnames(BookData$`CHEMICAL NAME`)
colnames(`CHEMICAL NAME`)
list_names <- colnames(BookData)[colnames(BookData)= BookData$`CHEMICAL NAME`]
list_names <- colnames(BookData)[colnames(BookData) =`CHEMICAL NAME`]
list_names <- colnames(BookData)[colnames(BookData) =`CHEMICAL NAME`]
list_names <- colnames(BookData)[colnames(BookData) !=`CHEMICAL NAME`]
list_names <- colnames(BookData)[colnames(BookData) ="CHEMICAL NAME"]
list_names <- colnames(BookData)[colnames(BookData$`CHEMICAL NAME`) ="CHEMICAL NAME"]
list_names <- colnames(BookData)[colnames(BookData$`CHEMICAL NAME`)
setwd("C:/Users/aholl/Desktop/Data Science Portfolio/Project #1/project#1newdata/Colorado EPA Data")
setwd("C:/Users/aholl/Desktop/Data Science Portfolio/Project #1/project#1data")
library(readxl)
Summary_Table_by_Contaminant <- read_excel("C:/Users/aholl/Desktop/Data Science Portfolio/Project #1/project#1newdata/Summary Table by Contaminant.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text"))
View(Summary_Table_by_Contaminant)
library(readxl)
Summary_Table_by_Contaminant <- read_excel("C:/Users/aholl/Desktop/Data Science Portfolio/Project #1/project#1newdata/Summary Table by Contaminant.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text"))
View(Summary_Table_by_Contaminant)
library(dplyr)
water_data <- Summary_Table_by_Contaminant
# Remove any duplicate rows
water_data <- distinct(water_data)
# Remove any duplicate rows
water_data <- distinct(water_data)
# Remove any unnecessary columns
water_data <- select(water_data, -unnecessary_column1, -unnecessary_column2)
# Remove rows with missing values
water_data <- na.omit(water_data)
# Check for outliers and remove them if necessary
water_data <- filter(water_data, variable <= upper_threshold)
# Check for outliers and remove them if necessary
water_data <- filter(water_data, 1::29 <= upper_threshold)
# Check for outliers and remove them if necessary
water_data <- filter(water_data, 1-29 <= upper_threshold)
# Check for outliers and remove them if necessary
water_data <- filter(water_data,  <= upper_threshold)
Assuming you have a cleaned dataset named "water_data" containing the water quality data from Hardrock mining in the Colorado region, here is an example of how you can perform exploratory data analysis using R:
# Load the required libraries
library(dplyr)
library(ggplot2)
# Summary statistics
summary(water_data)
# Histogram of the target variable
ggplot(water_data, aes(x = target_variable)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Load the required libraries
library(dplyr)
library(ggplot2)
# Summary statistics
summary(water_data)
# Histogram of the target variable
ggplot(water_data, aes(x = target_variable)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
View(water_data)
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black") +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 5) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 25) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 40) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 150) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 900) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = `Containment`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$Contaminant)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`Health Advisory (ng/L)`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`Minimum Reporting Level (ng/L)`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`Results > HA`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`PWSs with Results > HA`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`Results ≥ MRL`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`PWSs with Results ≥ MRL`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`Results in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`PWSs in Selection`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$Contaminant)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$(int)Contaminant)) +
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins and customize the appearance
ggplot(water_data, aes(x = water_data$`Results > HA`)) +
geom_histogram(
binwidth = 1,              # Specify the width of bins
fill = "lightblue",       # Fill color
color = "black",          # Border color
alpha = 0.7              # Transparency of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5)  # Customize plot title size and alignment
)
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins, customize the appearance, and increase bin width and plot size
ggplot(water_data, aes(x = actual_target_variable_name)) +
geom_histogram(
binwidth = 5,              # Increase the width of bins
fill = "skyblue",         # Fill color
color = "black",          # Border color
alpha = 0.8,              # Transparency of bars
size = 0.5                # Border size of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5),  # Customize plot title size and alignment
plot.background = element_rect(fill = "white"),   # Set plot background color
plot.margin = margin(20, 20, 20, 20)    # Adjust plot margins for larger size
) +
coord_cartesian(xlim = c(0, 100))  # Adjust x-axis limits if needed
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins, customize the appearance, and increase bin width and plot size
ggplot(water_data, aes(x = water_data$`Results > HA`)) +
geom_histogram(
binwidth = 5,              # Increase the width of bins
fill = "skyblue",         # Fill color
color = "black",          # Border color
alpha = 0.8,              # Transparency of bars
size = 0.5                # Border size of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5),  # Customize plot title size and alignment
plot.background = element_rect(fill = "white"),   # Set plot background color
plot.margin = margin(20, 20, 20, 20)    # Adjust plot margins for larger size
) +
coord_cartesian(xlim = c(0, 100))  # Adjust x-axis limits if needed
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins, customize the appearance, and increase bin width and plot size
ggplot(water_data, aes(x = actual_target_variable_name)) +
geom_histogram(
binwidth = 5,              # Increase the width of bins
fill = "skyblue",         # Fill color
color = "black",          # Border color
alpha = 0.8,              # Transparency of bars
size = 0.5                # Border size of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5),  # Customize plot title size and alignment
plot.background = element_rect(fill = "white"),   # Set plot background color
plot.margin = unit(c(1, 1, 2, 2), "cm")    # Adjust plot margins for larger size
) +
coord_cartesian(xlim = c(0, 100))  # Adjust x-axis limits if needed
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins, customize the appearance, and increase bin width and plot size
ggplot(water_data, aes(x = actual_target_variable_name)) +
geom_histogram(
binwidth = 5,              # Increase the width of bins
fill = "skyblue",         # Fill color
color = "black",          # Border color
alpha = 0.8,              # Transparency of bars
size = 0.5                # Border size of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5),  # Customize plot title size and alignment
plot.background = element_rect(fill = "white"),   # Set plot background color
plot.margin = unit(c(1, 1, 2, 2), "cm")    # Adjust plot margins for larger size
) +
coord_cartesian(xlim = c(0, 100))  # Adjust x-axis limits if needed
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins, customize the appearance, and increase bin width and plot size
ggplot(water_data, aes(x = water_data$`Results > HA`)) +
geom_histogram(
binwidth = 5,              # Increase the width of bins
fill = "skyblue",         # Fill color
color = "black",          # Border color
alpha = 0.8,              # Transparency of bars
size = 0.5                # Border size of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5),  # Customize plot title size and alignment
plot.background = element_rect(fill = "white"),   # Set plot background color
plot.margin = unit(c(1, 1, 2, 2), "cm")    # Adjust plot margins for larger size
) +
coord_cartesian(xlim = c(0, 100))  # Adjust x-axis limits if needed
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`Results > HA`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 5) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins, customize the appearance, and increase bin width and plot size
ggplot(water_data, aes(x = water_data$`Results > HA`)) +
geom_histogram(
binwidth = 15,              # Increase the width of bins
fill = "skyblue",         # Fill color
color = "black",          # Border color
alpha = 0.8,              # Transparency of bars
size = 0.5                # Border size of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5),  # Customize plot title size and alignment
plot.background = element_rect(fill = "white"),   # Set plot background color
plot.margin = unit(c(1, 1, 2, 2), "cm")    # Adjust plot margins for larger size
) +
coord_cartesian(xlim = c(0, 100))  # Adjust x-axis limits if needed
library(dplyr)
library(ggplot2)
# Assuming your dataset is named "water_data" and the target variable is "actual_target_variable_name"
# Adjust the number of bins, customize the appearance, and increase bin width and plot size
ggplot(water_data, aes(x = water_data$`Results > HA`)) +
geom_histogram(
binwidth = 15,              # Increase the width of bins
fill = "skyblue",         # Fill color
color = "black",          # Border color
alpha = 0.8,              # Transparency of bars
size = 0.8                # Border size of bars
) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Detailed Distribution of Water Quality") +
theme_minimal() +          # Customize the theme
theme(
axis.text = element_text(size = 12),        # Customize axis text size
axis.title = element_text(size = 14),       # Customize axis title size
plot.title = element_text(size = 16, hjust = 0.5),  # Customize plot title size and alignment
plot.background = element_rect(fill = "white"),   # Set plot background color
plot.margin = unit(c(1, 1, 2, 2), "cm")    # Adjust plot margins for larger size
) +
coord_cartesian(xlim = c(0, 100))  # Adjust x-axis limits if needed
# Visualize the distribution of the target variable (replace 'target_variable' with the actual name)
ggplot(water_data, aes(x = water_data$`PWSs with Results > HA`)) +
geom_histogram(fill = "lightblue", color = "black", binwidth = 400) +
labs(x = "Water Quality", y = "Frequency") +
ggtitle("Distribution of Water Quality")
# Scatter plot of numeric variables against the target variable
ggplot(water_data, aes(x = water_data$Contaminant, y = water_data$`PWSs with Results ≥ MRL`)) +
geom_point(color = "blue") +
labs(x = "Numeric Variable 1", y = "Water Quality") +
ggtitle("Numeric Variable 1 vs. Water Quality")
View(water_data)
#geom_encircle() cluster the data points and draw an ellipse around the cluster
# Plot the data
ggplot(water_data, aes(x = `Average Concentration (ppb)`, y = `Number of Samples`)) +
geom_point(aes(color = `Contaminant`)) +
geom_encircle(aes(fill = `Contaminant`), s_shape = 1.5, expand = 0.08, color = "black", alpha = 0.2) +
theme_bw() +
theme(legend.position = "none") +
labs(title = "Average Concentration (ppb) vs Number of Samples",
x = "Average Concentration (ppb)",
y = "Number of Samples")
library(ggplot2)
library(ggalt)
install.packages(ggalt)
install.packages("ggalt")
library(ggalt)
library(ggfortify)
install.packages("ggfortify")
# Assuming you have loaded the required libraries and have your data loaded into water_data
# Select the columns for PCA
selected_data <- water_data %>%
select(`PWSs in Selection`, `Results in Selection`, `Number of Samples`)
# Assuming you have loaded the required libraries and have your data loaded into water_data
# Select the columns for PCA
selected_data <- water_data %>%
select(`PWSs in Selection`, `Results in Selection`, `Contaminant`)
# Standardize the data (optional, but recommended for PCA)
scaled_data <- scale(selected_data)
# Assuming you have loaded the required libraries and have your data loaded into water_data
# Select the columns for PCA
selected_data <- water_data %>%
select(`PWSs in Selection`, `Results in Selection`, `PWSs with Results ≥ MRL``)
# Standardize the data (optional, but recommended for PCA)
scaled_data <- scale(selected_data)
# Perform PCA
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Print summary of PCA results
summary(pca_result)
# Visualize PCA results
autoplot(pca_result, data = water_data, colour = NULL, loadings = TRUE)
# Select the columns for PCA
selected_data <- water_data %>%
select(`PWSs in Selection`, `Results in Selection`, `PWSs with Results ≥ MRL`)
# Standardize the data (optional, but recommended for PCA)
scaled_data <- scale(selected_data)
# Perform PCA
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Print summary of PCA results
summary(pca_result)
# Visualize PCA results
autoplot(pca_result, data = water_data, colour = NULL, loadings = TRUE)
library(ggfortify)
# Select the columns for PCA
selected_data <- water_data %>%
select(`PWSs in Selection`, `Results in Selection`, `PWSs with Results ≥ MRL`)
# Standardize the data (optional, but recommended for PCA)
scaled_data <- scale(selected_data)
# Perform PCA
pca_result <- prcomp(scaled_data, center = TRUE, scale. = TRUE)
# Print summary of PCA results
summary(pca_result)
# Visualize PCA results
autoplot(pca_result, data = water_data, colour = NULL, loadings = TRUE)
biplot(results, scale = 0)
# Standardize the data (optional, but recommended for PCA)
scaled_data <- scale(pca_result)
setwd("C:/Users/aholl/Desktop/Data Science Portfolio/Project #1/project#1data")
library(readxl)
Summary_Table_by_Contaminant <- read_excel("C:/Users/aholl/Desktop/Data Science Portfolio/Project #1/project#1newdata/Summary Table by Contaminant.xlsx",
col_types = c("text", "numeric", "numeric",
"numeric", "numeric", "numeric",
"numeric", "text", "text"))
View(Summary_Table_by_Contaminant)
library(dplyr)
water_data <- Summary_Table_by_Contaminant
# Remove any duplicate rows
water_data <- distinct(water_data)
# Load the required libraries
library(dplyr)
library(ggplot2)
#Summary statistics
summary(water_data)
#Summary statistics
Summary.ordered(water_data)
#Summary statistics
Summary.numeric_version(water_data)
#Summary statistics
summary.matrix(water_data)
#Summary statistics
Summary_Table_by_Contaminant(water_data)
#Summary statistics
Summary_Table_by_Contaminant(water_data)
#Summary statistics
Summary.data.frame(water_data)
#Summary statistics
Summary_Table_by_Contaminant(water_data)
#Summary statistics
Summary_Table_by_Contaminant(water_data)
#  Standardize the data by subtracting the mean and dividing by the standard deviation
water_data <- scale(water_data)
#  Standardize the data by subtracting the mean and dividing by the standard deviation
water_data <- scale(water_data)
# Compute the covariance matrix of the standardized data
cov_matrix <- cov(water_data)
# Compute the eigenvalues and eigenvectors of the covariance matrix
eigen_values <- eigen(cov_matrix)$values
# Compute the proportion of variance explained by each principal component
variance_explained <- eigen_values / sum(eigen_values)
# Compute the cumulative proportion of variance explained by the first k principal components
cumulative_variance_explained <- cumsum(variance_explained)
